import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"实施步骤（修正版）","description":"","frontmatter":{},"headers":[],"relativePath":"implementation-steps.md","filePath":"implementation-steps.md","lastUpdated":1757514271000}');
const _sfc_main = { name: "implementation-steps.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="实施步骤-修正版" tabindex="-1">实施步骤（修正版） <a class="header-anchor" href="#实施步骤-修正版" aria-label="Permalink to &quot;实施步骤（修正版）&quot;">​</a></h1><p>以下步骤基于当前仓库现状，确保最小可运行闭环（Vitest+TDD、VitePress 文档、Vercel 部署）。</p><h2 id="_1-测试环境-vitest-react-testing-library" tabindex="-1">1. 测试环境（Vitest + React Testing Library） <a class="header-anchor" href="#_1-测试环境-vitest-react-testing-library" aria-label="Permalink to &quot;1. 测试环境（Vitest + React Testing Library）&quot;">​</a></h2><ul><li><p>确认 vitest 配置：</p><ul><li>文件：packages/flexi-ui/vitest.config.ts</li><li>要点： <ul><li>globals: true</li><li>environment: jsdom</li><li>setupFiles: [&#39;./src/test/setup.ts&#39;] // 若不存在需创建</li><li>include: [&#39;src/**/*.{test,spec}.{ts,tsx}&#39;]</li><li>alias: &#39;@&#39; -&gt; &#39;./src&#39;</li></ul></li></ul></li><li><p>新建测试初始化文件：</p><ul><li>路径：packages/flexi-ui/src/test/setup.ts</li><li>内容要点： <ul><li>引入 @testing-library/jest-dom 扩展</li><li>为 RTL 配置 cleanup、vi.mock 兼容等</li><li>避免 any，使用精确类型</li></ul></li></ul></li><li><p>推荐依赖（与 Vite 7 兼容）：</p><ul><li>vitest ^1.6.0</li><li>jsdom ^24.0.0</li><li>@testing-library/react ^14.1.2</li><li>@testing-library/jest-dom ^6.4.2</li><li>@types/jsdom ^21.1.7</li></ul></li></ul><blockquote><p>提示：如需快照测试可加 @vitest/snapshot。</p></blockquote><h2 id="_2-文档站点-vitepress-react-包装器" tabindex="-1">2. 文档站点（VitePress + React 包装器） <a class="header-anchor" href="#_2-文档站点-vitepress-react-包装器" aria-label="Permalink to &quot;2. 文档站点（VitePress + React 包装器）&quot;">​</a></h2><ul><li><p>安装依赖（开发环境）：</p><ul><li>pnpm add -D vitepress @types/node vue @vitejs/plugin-react</li></ul></li><li><p>目录结构（片段）：</p><ul><li>docs/ <ul><li>.vitepress/ <ul><li>config.ts</li><li>theme/ <ul><li>index.ts</li><li>components/ <ul><li>DemoContainer.vue</li><li>ApiTable.vue</li><li>ReactDemo.vue // 使用该包装器渲染 React 组件</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>VitePress 主配置（关键信息）：</p><ul><li>base: &#39;/&#39;</li><li>vite.plugins: [react()]</li><li path.resolve(__dirname,="" css-module="/../src&#39;)">vite.resolve.alias:</li><li>server.fs.allow: [&#39;..&#39;, &#39;../..&#39;]</li></ul></li><li><p>主题配置（关键信息）：</p><ul><li>不要直接注册 React 组件到 app.component</li><li>在 enhanceApp 中注册 DemoContainer、ApiTable、ReactDemo 等 Vue 组件</li><li>ReactDemo.vue 内使用 ReactDOM.createRoot 进行挂载</li></ul></li><li><p>文档示例页：</p><ul><li>将 <code>&lt;Button&gt;</code> 等直接 JSX 替换为： <ul><li><code>&lt;ReactDemo name=&quot;Button&quot; :props=&quot;{ children: &#39;默认按钮&#39; }&quot; /&gt;</code></li><li><code>&lt;ReactDemo name=&quot;Button&quot; :props=&quot;{ variant: &#39;primary&#39;, children: &#39;主要按钮&#39; }&quot; /&gt;</code></li></ul></li></ul></li><li><p>package.json 脚本：</p><ul><li>docs:dev =&gt; vitepress dev docs --port 3000</li><li>docs:build =&gt; vitepress build docs</li><li>docs:preview =&gt; vitepress preview docs --port 4173</li><li>build:all =&gt; 先执行 build:lib 再执行 docs:build（PowerShell 请分两条执行）</li></ul></li></ul><blockquote><p>PowerShell 提示：在交互式终端中，依次执行 <code>pnpm run build:lib</code> 与 <code>pnpm run docs:build</code>，避免使用 <code>&amp;&amp;</code>。</p></blockquote><h2 id="_3-部署-vercel" tabindex="-1">3. 部署（Vercel） <a class="header-anchor" href="#_3-部署-vercel" aria-label="Permalink to &quot;3. 部署（Vercel）&quot;">​</a></h2><ul><li><p>vercel.json 建议：</p><ul><li>buildCommand: &quot;pnpm docs:build&quot;</li><li>outputDirectory: &quot;docs/.vitepress/dist&quot;</li><li>devCommand: &quot;pnpm docs:dev&quot;</li><li>installCommand: &quot;pnpm install&quot;</li><li NODE_VERSION:="" 18="">env:</li></ul></li><li><p>基础路径说明：</p><ul><li>本方案统一使用 base: &#39;/&#39;，适配 Vercel 根域名或自定义域</li></ul></li></ul><h2 id="_4-组件开发与测试流程-tdd" tabindex="-1">4. 组件开发与测试流程（TDD） <a class="header-anchor" href="#_4-组件开发与测试流程-tdd" aria-label="Permalink to &quot;4. 组件开发与测试流程（TDD）&quot;">​</a></h2><ul><li><p>新建组件时：</p><ol><li>先编写失败的测试（组件的可访问性、属性、事件、样式快照等）</li><li>实现最小功能使测试通过</li><li>重构与补充边界测试</li></ol></li><li><p>基础测试模板建议（tsx）：</p><ul><li>render、screen、within、userEvent</li><li>getByRole、getByText、findBy* 的合理选择</li><li>断言使用 jest-dom 匹配器（toBeInTheDocument, toHaveClass 等）</li></ul></li></ul><h2 id="_5-依赖版本建议-与-vite-7-兼容" tabindex="-1">5. 依赖版本建议（与 Vite 7 兼容） <a class="header-anchor" href="#_5-依赖版本建议-与-vite-7-兼容" aria-label="Permalink to &quot;5. 依赖版本建议（与 Vite 7 兼容）&quot;">​</a></h2><ul><li>vite ^5.4.x（仓库已定）</li><li>vitepress ^1.4.x</li><li>@vitejs/plugin-react ^4.3.x</li><li>react ^18.2.x</li><li>react-dom ^18.2.x</li><li>typescript ^5.4.x</li><li>eslint ^9.x（如使用）</li></ul><h2 id="_6-常见问题修正" tabindex="-1">6. 常见问题修正 <a class="header-anchor" href="#_6-常见问题修正" aria-label="Permalink to &quot;6. 常见问题修正&quot;">​</a></h2><ul><li>React 在 VitePress 中无法渲染：确保已安装 @vitejs/plugin-react，且通过 ReactDemo 包装器挂载</li><li>文档路径 404：确认 base 为 &#39;/&#39;，vercel.json routes 指向 index.html 或使用静态导出默认路由</li><li>PowerShell 脚本串联失败：避免使用 &amp;&amp;，改为分步执行</li><li>vitest setup 文件缺失：创建 packages/flexi-ui/src/test/setup.ts 并在 vitest.config.ts 中保持路径一致</li></ul><h2 id="版本与环境建议-补充" tabindex="-1">版本与环境建议（补充） <a class="header-anchor" href="#版本与环境建议-补充" aria-label="Permalink to &quot;版本与环境建议（补充）&quot;">​</a></h2><ul><li>统一使用 pnpm 管理依赖与脚本</li><li>Node.js: 18.x LTS</li><li>在 PowerShell 环境中，串行执行命令请分步运行，避免使用 &amp;&amp;</li></ul><h2 id="vitepress-关键确认-补充" tabindex="-1">VitePress 关键确认（补充） <a class="header-anchor" href="#vitepress-关键确认-补充" aria-label="Permalink to &quot;VitePress 关键确认（补充）&quot;">​</a></h2><ul><li>base: &#39;/&#39;</li><li>vite.plugins: [react()]</li><li>通过 ReactDemo.vue 作为包装器渲染 React 组件，不要直接 app.component 注册 React 组件</li></ul><h2 id="vitest-设置文件路径确认-补充" tabindex="-1">Vitest 设置文件路径确认（补充） <a class="header-anchor" href="#vitest-设置文件路径确认-补充" aria-label="Permalink to &quot;Vitest 设置文件路径确认（补充）&quot;">​</a></h2><ul><li>vitest.config.ts 中的 setupFiles 配置为 [&#39;./src/test/setup.ts&#39;]，如路径不存在请创建该文件</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("implementation-steps.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const implementationSteps = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  implementationSteps as default
};
